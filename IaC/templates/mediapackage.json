{
  "MediaPackageVOD": {
    "Type": "AWS::CloudFormation::CustomResource",
    "Properties": {
      "ServiceToken": {
        "Fn::GetAtt": [
          "CustomResource8CDCD7A7",
          "Arn"
        ]
      },
      "Resource": "MediaPackageVod",
      "StackName": {
        "Ref": "AWS::StackName"
      },
      "GroupId": {
        "Fn::Join": [
          "",
          [
            {
              "Ref": "AWS::StackName"
            },
            "-packaging-group"
          ]
        ]
      },
      "PackagingConfigurations": "HLS,DASH,MSS,CMAF",
      "DistributionId": {
        "Ref": "CloudFrontToS3CloudFrontDistribution241D9866"
      },
      "EnableMediaPackage": {
        "Fn::If": [
          "EnableMediaPackageCondition",
          "true",
          "false"
        ]
      }
    },
    "UpdateReplacePolicy": "Delete",
    "DeletionPolicy": "Delete",
    "Metadata": {
      "aws:cdk:path": "VideoOnDemand/MediaPackageVod/Default"
    }
  },
  "MediaPackageVODPolicy": {
    "Type": "AWS::IAM::Policy",
    "Properties": {
      "PolicyDocument": {
        "Statement": [
          {
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Effect": "Allow",
            "Resource": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":logs:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":log-group:/aws/lambda/*"
                ]
              ]
            }
          },
          {
            "Action": [
              "s3:PutBucketNotification",
              "s3:PutObject",
              "s3:PutObjectAcl"
            ],
            "Effect": "Allow",
            "Resource": {
              "Fn::GetAtt": [
                "Source71E471F1",
                "Arn"
              ]
            }
          },
          {
            "Action": [
              "mediaconvert:CreatePreset",
              "mediaconvert:CreateJobTemplate",
              "mediaconvert:DeletePreset",
              "mediaconvert:DeleteJobTemplate",
              "mediaconvert:DescribeEndpoints",
              "mediaconvert:ListJobTemplates",
              "mediaconvert:TagResource",
              "mediaconvert:UntagResource"
            ],
            "Effect": "Allow",
            "Resource": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":mediaconvert:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":*"
                ]
              ]
            }
          },
          {
            "Action": [
              "mediapackage-vod:DeleteAsset",
              "mediapackage-vod:DeletePackagingConfiguration"
            ],
            "Effect": "Allow",
            "Resource": [
              {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":mediapackage-vod:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":assets/*"
                  ]
                ]
              },
              {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":mediapackage-vod:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":packaging-configurations/packaging-config-*"
                  ]
                ]
              }
            ]
          },
          {
            "Action": [
              "mediapackage-vod:DescribePackagingGroup",
              "mediapackage-vod:DeletePackagingGroup"
            ],
            "Effect": "Allow",
            "Resource": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":mediapackage-vod:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":packaging-groups/",
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-packaging-group"
                ]
              ]
            }
          },
          {
            "Action": [
              "mediapackage-vod:CreatePackagingConfiguration",
              "mediapackage-vod:CreatePackagingGroup",
              "mediapackage-vod:ListAssets",
              "mediapackage-vod:ListPackagingConfigurations",
              "mediapackage-vod:ListPackagingGroups",
              "mediapackage-vod:TagResource",
              "mediapackage-vod:UntagResource"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "cloudfront:GetDistributionConfig",
              "cloudfront:UpdateDistribution"
            ],
            "Effect": "Allow",
            "Resource": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":cloudfront::",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":distribution/",
                  {
                    "Ref": "CloudFrontToS3CloudFrontDistribution241D9866"
                  }
                ]
              ]
            }
          }
        ],
        "Version": "2012-10-17"
      },
      "PolicyName": "CustomResourcePolicy79526710",
      "Roles": [
        {
          "Ref": "CustomResourceRoleAB1EF463"
        }
      ]
    },
    "Metadata": {
      "cfn_nag": {
        "rules_to_suppress": [
          {
            "id": "W12",
            "reason": "* is required to create CloudWatch logs and interact with MediaConvert / MediaPackage actions that do not support resource level permissions"
          },
          {
            "id": "W76",
            "reason": "High complexity due to number of policy statements needed for creating all custom resources"
          }
        ]
      },
      "cdk_nag": {
        "rules_to_suppress": [
          {
            "reason": "Resource ARNs are not generated at the time of policy creation",
            "id": "AwsSolutions-IAM5"
          }
        ]
      }
    }
  },
  "MediaPackageVODRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
      "AssumeRolePolicyDocument": {
        "Statement": [
          {
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            }
          }
        ],
        "Version": "2012-10-17"
      },
      "Tags": [
        {
          "Key": "SolutionId",
          "Value": "SO0021"
        }
      ]
    },
    "Metadata": {
      "cfn_nag": {
        "rules_to_suppress": [
          {
            "id": "W11",
            "reason": "* is required to create CloudWatch logs and interact with MediaConvert / MediaPackage actions that do not support resource level permissions"
          },
          {
            "id": "W76",
            "reason": "All policies are required by the custom resource."
          }
        ]
      }
    }
  },
  "MediaPackageVODLambda": {
    "Type": "AWS::Lambda::Function",
    "Properties": {
      "Code": {
        "S3Bucket": {
          "Fn::Sub": "solutions-${AWS::Region}"
        },
        "S3Key": "video-on-demand-on-aws/v6.1.13/asset8e80931aac8985763fa2f2014f507cb3f0967460fecfe135719327fb58f5e992.zip"
      },
      "Description": "Used to deploy MediaPackage VOD resources not supported by CloudFormation",
      "Environment": {
        "Variables": {
          "SOLUTION_IDENTIFIER": "AwsSolution/SO0021/v6.1.13"
        }
      },
      "FunctionName": {
        "Fn::Join": [
          "",
          [
            {
              "Ref": "AWS::StackName"
            },
            "-custom-resource"
          ]
        ]
      },
      "Handler": "index.handler",
      "Role": {
        "Fn::GetAtt": [
          "CustomResourceRoleAB1EF463",
          "Arn"
        ]
      },
      "Runtime": "nodejs22.x",
      "Tags": [
        {
          "Key": "SolutionId",
          "Value": "SO0021"
        }
      ],
      "Timeout": 30
    },
    "DependsOn": [
      "CustomResourcePolicy79526710",
      "CustomResourceRoleAB1EF463"
    ],
    "Metadata": {
      "cfn_nag": {
        "rules_to_suppress": [
          {
            "id": "W58",
            "reason": "Invalid warning: function has access to cloudwatch"
          },
          {
            "id": "W89",
            "reason": "This CustomResource does not need to be deployed inside a VPC"
          },
          {
            "id": "W92",
            "reason": "This CustomResource does not need to define ReservedConcurrentExecutions to reserve simultaneous executions"
          }
        ]
      },
      "cdk_nag": {
        "rules_to_suppress": [
          {
            "reason": "Lambda NodeJS 22 Runtime in development...",
            "id": "AwsSolutions-L1"
          }
        ]
      }
    }
  },
  "MediaPackageVODAssetsLambda": {
    "Type": "AWS::Lambda::Function",
    "Properties": {
      "Code": {
        "S3Bucket": {
          "Fn::Sub": "solutions-${AWS::Region}"
        },
        "S3Key": "video-on-demand-on-aws/v6.1.13/assetd91aaa38516433469f181d3cb14c82f76514c25f40b49b6513f0a66940c5f27f.zip"
      },
      "Description": "Ingests an asset into MediaPackage-VOD",
      "Environment": {
        "Variables": {
          "SOLUTION_IDENTIFIER": "AwsSolution/SO0021/v6.1.13",
          "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          "ErrorHandler": {
            "Fn::GetAtt": [
              "ErrorHandlerLambdaFC10367C",
              "Arn"
            ]
          },
          "GroupId": {
            "Fn::GetAtt": [
              "MediaPackageVod",
              "GroupId"
            ]
          },
          "GroupDomainName": {
            "Fn::GetAtt": [
              "MediaPackageVod",
              "GroupDomainName"
            ]
          },
          "MediaPackageVodRole": {
            "Fn::GetAtt": [
              "MediaPackageVodRole931E8163",
              "Arn"
            ]
          }
        }
      },
      "FunctionName": {
        "Fn::Join": [
          "",
          [
            {
              "Ref": "AWS::StackName"
            },
            "-media-package-assets"
          ]
        ]
      },
      "Handler": "index.handler",
      "Role": {
        "Fn::GetAtt": [
          "MediaPackageAssetsRole5B26B67C",
          "Arn"
        ]
      },
      "Runtime": "nodejs22.x",
      "Tags": [
        {
          "Key": "SolutionId",
          "Value": "SO0021"
        }
      ],
      "Timeout": 120
    },
    "DependsOn": [
      "MediaPackageAssetsPolicy84101CE2",
      "MediaPackageAssetsRole5B26B67C"
    ],
    "Metadata": {
      "cfn_nag": {
        "rules_to_suppress": [
          {
            "id": "W89",
            "reason": "Lambda functions do not need a VPC"
          },
          {
            "id": "W92",
            "reason": "Lambda do not need ReservedConcurrentExecutions in this case"
          },
          {
            "id": "W58",
            "reason": "Invalid warning: function has access to cloudwatch"
          }
        ]
      },
      "cdk_nag": {
        "rules_to_suppress": [
          {
            "reason": "Lambda NodeJS 22 Runtime in development...",
            "id": "AwsSolutions-L1"
          }
        ]
      }
    }
  }
}
